{{- define "cluster-ip-service" }}
  # Which version of K8s API to use
  apiVersion: v1
    # The kind of K8s object to create
  kind: Service
  metadata:
    # -- Dynamically generate service name for each worker in values.yaml
    name: {{ .workerName }}-cluster-ip-service
    # Specification for service behaviours
  spec:
    # -- Specify the type of service to add
    type: ClusterIP
    # -- Specify to which pods this service will direct traffic
    selector:
      app: {{ .workerName }}-worker
    # -- List of ports this service exposes and the corresponding ports it routes to
    ports:
      # -- The protocol for this port
        - protocol: TCP
        # -- The port on which this service listens
        port: {{ index .Values .workerName "clusterIPService" "port" }}
        # -- The port on the selected pod to which traffic will be routed
        targetPort: {{ index .Values .workerName "clusterIPService" "targetPort" }}
{{- end -}}

# -- crypto
{{- include "cluster-ip-service" (dict "workerName" "crypto") }}
{{- include "corda.worker" ( list $ .Values.workers.crypto "crypto"
  ( dict "clusterDbAccess" true "additionalWorkerArgs" ( list "--hsm-id=SOFT" ) )
) }}

# -- db
{{- include "cluster-ip-service" (dict "workerName" "db") }}
{{- include "corda.worker" ( list $ .Values.workers.db "db"
  ( dict "clusterDbAccess" true )
) }}
{{- include "corda.worker" ( list $ .Values.workers.flow "flow"
  ( dict "stateManagerDbAccess" true "servicesAccessed" (list "crypto" "verification" "uniqueness" "persistence") )
) }}

# -- flowMapper
{{- include "cluster-ip-service" (dict "workerName" "flowMapper") }}
{{- include "corda.worker" ( list $ .Values.workers.flowMapper "flowMapper" ) }}

# -- verification
{{- include "cluster-ip-service" (dict "workerName" "verification") }}
{{- include "corda.worker" ( list $ .Values.workers.verification "verification" ) }}

# -- membership
{{- include "cluster-ip-service" (dict "workerName" "membership") }}
{{- include "corda.worker" ( list $ .Values.workers.membership "membership" ) }}

# -- p2pGateway
{{- include "cluster-ip-service" (dict "workerName" "p2pGateway") }}
{{- include "corda.worker" ( list $ .Values.workers.p2pGateway "p2pGateway"
  ( dict "httpPort" 8080 )
) }}

# -- p2pLinkManager
{{- include "cluster-ip-service" (dict "workerName" "p2pLinkManager") }}
{{- include "corda.worker" ( list $ .Values.workers.p2pLinkManager "p2pLinkManager" ) }}

# -- persistence
{{- include "cluster-ip-service" (dict "workerName" "persistence") }}
{{- include "corda.worker" ( list $ .Values.workers.persistence "persistence"
    ( dict "clusterDbAccess" true )
  ) }}

# -- rest
{{- include "cluster-ip-service" (dict "workerName" "rest") }}
{{- include "corda.worker" ( list $ .Values.workers.rest "rest"
  ( dict "httpPort" 8888 "tlsSecretName" ( include "corda.restTlsSecretName" $ ) "additionalWorkerArgs" ( list "-rtls.crt.path=/tls/tls.crt" "-rtls.key.path=/tls/tls.key" "-rtls.ca.crt.path=/tls/ca.crt"  ) )
) }}

# -- uniqueness
{{- include "cluster-ip-service" (dict "workerName" "uniqueness") }}
{{- include "corda.worker" ( list $ .Values.workers.uniqueness "uniqueness"
  ( dict "clusterDbAccess" true )
) }}
